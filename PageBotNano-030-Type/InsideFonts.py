#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# -----------------------------------------------------------------------------
#
#   P A G E B O T  N A N O
#
#   Copyright (c) 2020+ Buro Petr van Blokland + Claudia Mens
#   www.pagebot.io
#   Licensed under MIT conditions
#
#   Supporting DrawBot, www.drawbot.com
# -----------------------------------------------------------------------------
#
#   InsideFonts.py
#
import os
from pagebotnano_030.constants import A4
from pagebotnano_030.document import Document
from pagebotnano_030.elements import Rect, Text, GlyphView, Stacked, Waterfall
from pagebotnano_030.fonttoolbox.objects.font import Font
from pagebotnano_030.toolbox.color import color

# PageBot is a demo (incomplete) family version of TYPETR Upgrade,
# which is added to the resources/fonts/typetr folders for testing purposes.
fontPath = '../resources/fonts/typetr/PageBot-Bold.ttf'

# Get the Font instance of the PageBot-Bold.ttf file. This class is using
# the fontTools TTFont to open the file and access the tables.
# The Font class is a wrapper around that TTFont object, which can se accessed
# directly by f.ttFont (in case information is needed that is not supported
# by the wrapper). For normal use the wrapper is the main interface to the font 
# data. Some compatibility is kept with the RoboFont/FontParts api, such as
# storing the meta information in a Font.info instance.
f = Font(fontPath)

# Size and padding of the specimen page.
w, h = A4
padding = 40

# Create a new document for the given size
doc = Document(w=w, h=h)

# Create the first page in the document, taking over the document size and padding.
page = doc.newPage()
# Show a single glyph, as large as it fits (in height or width) on the page, 
# black on white background.
# The GlyphView element has a number of attributes (guided by attributes), 
# to define the details that should be shown with the glyph outline.
e = GlyphView('g', font=f, x=page.pl, y=page.pb, w=page.pw, h=page.ph,
	lineWidth=4)
# Place the element on the page.
page.addElement(e)

# Create the first page in the document, taking over the document size and padding.
page = doc.newPage()
# Show a single glyph, as large as it fits (in height or width) on the page, 
# white on color background.
# The GlyphView element has a number of attributes (guided by attributes), 
# to define the details that should be shown with the glyph outline.
gv = GlyphView('H', font=f, x=page.pl, y=page.pb, w=page.pw, h=page.ph,
	fill=color('darkblue'), textFill=color(1), lineStroke=False)
page.addElement(gv)

page = doc.newPage()
words = 'This is a\nstacked list\nof words\ngenerated by\nPageBotNano\nusing TYPETR\nUpgrade Bold\nin various\nsizes that fill\nthe line'.upper().split('\n')
st = Stacked(words=words, font=f, leading=0.62, x=page.pl, y=-page.pb/2, w=page.pw, h=page.h)
page.addElement(st)

page = doc.newPage()
# Default Hamburgefonstiv
st = Waterfall(font=f, leading=1.4, x=page.pl, y=page.pb, w=page.pw, h=page.ph)
page.addElement(st)

page = doc.newPage()
# Altering the sample string of the waterfall
sample = Waterfall.AaBbCc
st = Waterfall(sample, font=f, leading=1.4, x=page.pl, y=page.pb, w=page.pw, h=page.ph)
page.addElement(st)

doc.export('_export/InsideFonts.pdf')
print('Done 030')
